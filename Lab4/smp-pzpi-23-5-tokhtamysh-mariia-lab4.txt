МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ

ЗВІТ
з лабораторної роботи №4
з дисципліни «Скриптові мови програмування»

Виконала                                                                 Перевірив:
ст. гр. ПЗПІ-23-5                                                        ст. викладач катедри ПІ
Тохтамиш Марія                                                           Сокорчук Ігор Петрович


Харків 2025


1 ІСТОРІЯ ЗМІН
№	   Дата	        Версія звіту	 Опис змін та виправлень
1	   01.06.2025 	0.1	           Створено розділ «Завдання», «Опис виконаної роботи» та «Висновки».


2 ЗАВДАННЯ
1. Масштабування сайту
•	Прибрати дублювання шапки (header) і підвалу (footer).
•	Створити файли header.php і footer.php.
•	Створити головний файл main.php, який буде підключати інші сторінки за допомогою конструкції switch.
2. Реалізація авторизації
•	Додати сторінку логіна:
o	Форма з полями "логін" та "пароль".
o	Файл credential.php містить масив з дозволеним логіном і паролем.
o	Якщо користувач неавторизований, доступ до внутрішніх сторінок сайту заборонено (показується сторінка page404.php з повідомленням про необхідність входу).
3. Сторінка профілю користувача
•	Створити profile.php:
o	Форма для редагування інформації: ім’я, прізвище, дата народження, коротка біографія, фото.
o	Тип форми — enctype="multipart/form-data".
o	При завантаженні сторінки — підставити дані з файлу.
o	При збереженні:
	Перевірити, що всі поля заповнені.
	Ім’я та прізвище мають бути рядками довжиною >1 символ.
	Вік користувача має бути >= 16 років.
	Біографія має містити не менше 50 символів.
	Фото має бути коректного типу та зберігатися на сервері.


3 ОПИС ВИКОНАНОЇ РОБОТИ
	На початку виконання лабораторної роботи розробка розпочинається з масштабування сайту та структурування коду, щоб зробити проєкт більш зручним для подальшої підтримки та розвитку. З метою уникнення дублювання однакових елементів, таких як шапка сайту (header) та підвал (footer), ці частини коду виносяться в окремі файли — header.php та footer.php. Такий підхід дозволяє не повторювати HTML-структуру на кожній сторінці, а підключати її централізовано через головний файл main.php. Це значно спрощує оновлення загальних елементів сайту та сприяє кращій організації коду.
	У файлі header.php міститься навігаційне меню (<nav class="navbar">), яке адаптується в залежності від стану сесії. У шапці сайту відбувається перевірка, чи користувач увійшов у систему. Якщо користувач залогінений (тобто в сесії присутній $_SESSION['username']), показується меню з посиланнями на Cart, Profile і Logout. Якщо не залогінений — лише пункт Login. Цей підхід дозволяє робити шапку динамічною.
	В той же час файл footer.php знаходиться HTML-код для нижньої частини сайту з посиланнями на основні сторінки (Home, Products, Cart, About us). Після виносу в окремий файл його можна легко змінювати один раз — і ці зміни одразу застосовуються до всього сайту.
	У файлі main.php реалізовано централізовану логіку обробки всіх запитів на сайт. Це так званий єдиний вхід, де контролюється, яку сторінку показувати користувачу та чи має він на неї доступ. У рядках 2–4 виконується перевірка стану сесії. Якщо сесія ще не запущена (тобто session_status() повертає PHP_SESSION_NONE), викликається функція session_start(). 

2 if (session_status() === PHP_SESSION_NONE) {
3   session_start();
4 }

	Далі, з рядка 12 починається основний блок switch ($page), який відповідає за маршрутизацію. У залежності від значення $page, завантажується відповідна сторінка з підкаталогу pages. Якщо $page дорівнює 'about_us', 'login' або 'logout', відповідні файли (about_us.php, login.php, logout.php) просто підключаються без перевірки, оскільки ці сторінки доступні всім користувачам. Особливу увагу приділено сторінкам 'profile', 'product' і 'basket'. Вони потребують авторизації.

12 switch ($page) {
13   case 'about_us':
14       include 'pages/about_us.php';
15        break;
16   case 'profile':
17        if ($isLoggedIn) {
18           include 'pages/profile.php';
19        } else {
20            include 'pages/page404.php';
21        }
22       break;
23    case 'product':
24    case 'basket':
25        if ($isLoggedIn) {
26            include "pages/{$page}.php";
27        } else {
28            include 'pages/page404.php';
29        }
30        break;
31    
32    case 'login':
33       include 'pages/login.php';
34        break;
35    case 'logout':
36        include 'pages/logout.php';
37        break;

	У випадку 'profile' (рядки 17–21), якщо користувач залогінений ($isLoggedIn === true), підключається сторінка profile.php, яка містить форму для редагування особистих даних. Якщо користувач неавторизований — показується сторінка page404.php, де повідомляється, що доступ заборонено без входу в систему. Для сторінок 'product' та 'basket' (рядки 22–28) логіка аналогічна, але підключення реалізовано більш гнучко: назва сторінки визначається динамічно через include "pages/{$page}.php", що дозволяє уникнути дублювання коду. Якщо $page не задано або дорівнює 'home', виводиться вітальний контент на головній сторінці. Тут розміщено заголовок, короткий опис концепції магазину, три переваги з іконками (екологічність, швидка доставка, підтримка локального виробника) та кнопка з посиланням на сторінку товарів.
	Далі було створено система авторизації користувача, яка включає перевірку логіна і пароля, встановлення сесії, обробку помилок та обмеження доступу до сторінок для неавторизованих користувачів.
У коді реалізовано механізм авторизації користувача. Спочатку, у рядках 2–4, перевіряється, чи сесія вже активна за допомогою session_status(). Якщо сесія ще не почалася, викликається session_start():

2 if (session_status() === PHP_SESSION_NONE) {
3        session_start();
4 }

	Далі, у рядку 6, підключається файл credential.php, в якому зберігається масив з дозволеним логіном і паролем. Зміст цього файлу приблизно такий:

2 $credentials = [
3       'userName' => 'Mariia',
4        'password' => '12345'
5   ];

	Спочатку перевіряється, чи форма була відправлена методом POST, що означає — користувач натиснув кнопку входу. Далі зчитуються введені логін і пароль, при цьому логін очищується від зайвих пробілів. Якщо хоча б одне з полів залишилося порожнім, формується повідомлення про помилку.
	Якщо ж логін і пароль збігаються з тими, що збережені у файлі credential.php, виконується процедура повного оновлення сесії. Спочатку стара сесія очищується і знищується, після чого створюється нова. Також генерується новий ідентифікатор сесії для підвищення безпеки. У результаті користувач вважається авторизованим, і в сесію записується його ім’я. Після успішної авторизації виконується перенаправлення користувача на сторінку профілю. header() змінює заголовок HTTP і надсилає браузеру інструкцію перейти на іншу сторінку., а exit необхідний, щоби зупинити подальше виконання скрипта після перенаправлення.

24 header('Location: main.php?page=profile');
25 exit;

	На сторінці профілю користувача реалізовано форму редагування персональних даних: ім’я, прізвище, дата народження, коротка біографія та фото. На самому початку змінна $profile ініціалізується як порожній масив. Далі перевіряється, чи існує файл db/profile.php. Якщо так — його підключають через include, що завантажує збережену інформацію профілю користувача (наприклад, ім’я, дату народження тощо) з попереднього сеансу.

8 $profile = [];
9 $profile_file = __DIR__ . '/../db/profile.php';
10 if (file_exists($profile_file)) {
11       include $profile_file;
12  }

	Коли користувач відкриває сторінку profile.php, вона зазвичай завантажується через HTTP-запит типу GET, тобто просто відображається у браузері. Але коли користувач натискає кнопку "Зберегти" після заповнення форми, дані надсилаються методом POST. У PHP можна перевірити тип запиту, звернувшись до змінної $_SERVER['REQUEST_METHOD']. Якщо вона дорівнює 'POST', це означає, що форма була надіслана.

64 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
65       $first_name = trim($_POST['first_name']);
66       $last_name = trim($_POST['last_name']);
67       $birth_date = trim($_POST['birth_date']);
68       $bio = trim($_POST['bio']);

	У цьому випадку PHP починає обробку надісланих даних. Значення з полів форми зчитуються за допомогою масиву $_POST, де ключі відповідають name атрибутам елементів форми: first_name, last_name, birth_date, bio. Але перед тим як використовувати ці дані, викликається функція trim() — вона видаляє пробіли на початку і в кінці кожного введеного значення. Це потрібно, щоб уникнути ситуацій, коли поле виглядає "заповненим", але фактично містить лише пробіли. Отже, цей етап є першим кроком валідації, де ми збираємо та попередньо очищаємо дані перед подальшою перевіркою або збереженням.

20     if (empty($firstName) || empty($lastName) || empty($birthDate) || empty($bio)) {
21        return "All text fields are required";
22    }
23    if (strlen($firstName) <= 1 || strlen($lastName) <= 1) {
24        return "First and last name must be longer than 1 character";
25    }
26    if (strtotime($birthDate) > strtotime('-16 years')) {
27        return "The user must be at least 16 years old";
28    }
29    if (strlen($bio) < 50) {
30        return "Biography must be at least 50 characters long";
31    }
32    return null;
33 }

	Цей блок коду перевіряє правильність введених користувачем даних у формі профілю. Спочатку перевіряється, чи всі поля заповнені — якщо хоча б одне порожнє, виводиться помилка. Потім перевіряється, щоб ім’я та прізвище мали більше одного символу. Далі — чи дата народження свідчить, що користувачу не менше 16 років. І нарешті, біографія повинна містити щонайменше 50 символів. Якщо всі умови виконано, дані можна зберігати. Це гарантує, що профіль буде повним і змістовним.


4 ВИСНОВКИ

	У ході виконання лабораторної роботи було реалізовано механізм автентифікації та авторизації користувачів. Я навчилася працювати із сесіями в PHP для зберігання інформації про залогіненого користувача. Була створена сторінка логіна з перевіркою введених даних без використання бази даних. Реалізовано обмеження доступу до контенту сайту для неавторизованих користувачів. Також створено сторінку профілю з можливістю редагування інформації та завантаження фотографії. Я навчилася використовувати форми з типом multipart/form-data для обробки файлів. Окрім цього, було удосконалено структуру коду сайту шляхом винесення шапки та підвалу в окремі файли з метою уникнення дублювання коду.

 
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: 
https://www.youtube.com/watch?v=Zd74Z9y1hKw

00:00 – Вступ 
00:18 – main.php
02:06 – login.php 
03:59 – profile.php 
05:38 – Завантаження та обробка фотографії 
06:38 – Демонстрація роботи сайту 
07:52 – Демострація: Редагування профілю 
09:05 – Демострація: Заміна фотографії профілю
