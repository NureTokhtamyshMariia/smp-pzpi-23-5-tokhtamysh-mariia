#!/bin/bash
script_dir="$(cd "$(dirname "$0")" && pwd)"

convert_encoding() {
  local enc_src="WINDOWS-1251"
  local enc_dst="UTF-8"
  iconv -f "$enc_src" -t "$enc_dst" "$source_csv" > "$converted_file"
  sed -i 's/\r/\n/g' "$converted_file"
}

extract_groups() {
  local tmp_file="tmp_groups.csv"
  sed '1d; s/^\"[[:space:]]*\([^ ]*\).*$/\1/' "$INPUT_FILE" > "$tmp_file"
  [[ ! $(head -n 1 "$tmp_file") =~ "-" ]] && return 1
  sort "$tmp_file" | uniq > sorted.csv && mv sorted.csv "$tmp_file"
  mv "$tmp_file" .group_list
  return 0
}

select_timetable_file() {
  local files=( $(ls "$script_dir"/TimeTable_??_??_20??.csv 2>/dev/null) )
  if [[ ${#files[@]} -eq 0 ]]; then
    echo "Files not found."
    exit 1
  fi
  echo "Select a file (or choose 'Quit' to exit):"
  select file in "${files[@]}" "Quit"; do
    if [[ "$file" == "Quit" ]]; then
      echo "Exiting..."
      exit 0
    elif [[ -n "$file" ]]; then
      selected_file="$file"
      break
    else
      echo "Invalid choice, please try again."
    fi
  done
}

select_group() {
  echo "Select a group (or type 'Quit' to exit):"
  select selected_group in $groups "Quit"; do
    if [[ "$selected_group" == "Quit" ]]; then
      echo "Exiting..."
      exit 0
    elif [[ -n "$selected_group" ]]; then
      break
    else
      echo "Invalid choice, please try again."
    fi
  done
}

generate_output_csv() {
  echo "\"Subject\",\"Start Date\",\"Start Time\",\"End Date\",\"End Time\",\"Description\"" > "$OUTPUT_FILE"

  declare -A subject_count

  awk -v group="$selected_group" 'BEGIN {
      FPAT = "([^,]+)|(\"[^\"]+\")"
      OFS = ","
  }
  NR > 1 {
      for(i = 1; i <= NF; i++) {
          sub(/^"/, "", $i)
          sub(/"$/, "", $i)
      }
      if ($1 ~ "^" group " -") {
          subject = $12
          subject_count[subject]++

          numbered_subject = subject "; â„–" subject_count[subject]

          start_date = $2
          end_date = $4
          start_time = $3
          end_time = $5

          split(start_date, start_arr, ".")
          start_date = start_arr[2] "/" start_arr[1] "/" start_arr[3]

          split(end_date, end_arr, ".")
          end_date = end_arr[2] "/" end_arr[1] "/" end_arr[3]

          split(start_time, start_time_arr, ":")
          start_hour = start_time_arr[1]
          start_minute = start_time_arr[2]
          start_ampm = (start_hour >= 12 && start_hour < 24) ? "PM" : "AM"
          if (start_hour > 12) { start_hour -= 12 }
          if (start_hour == 0) { start_hour = 12 }
          start_time = start_hour ":" start_minute " " start_ampm

          split(end_time, end_time_arr, ":")
          end_hour = end_time_arr[1]
          end_minute = end_time_arr[2]
          end_ampm = (end_hour >= 12 && end_hour < 24) ? "PM" : "AM"
          if (end_hour > 12) { end_hour -= 12 }
          if (end_hour == 0) { end_hour = 12 }
          end_time = end_hour ":" end_minute " " end_ampm

          printf "\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"\n", numbered_subject, start_date, start_time, end_date, end_time, group
      }
  }' "$INPUT_FILE" >> "$OUTPUT_FILE"

  echo "File $OUTPUT_FILE created!"
}

is_schedule_file() {
  local f="$1"
  [[ "$f" =~ ^TimeTable_[0-9]{2}_[0-9]{2}_[0-9]{4}\.csv$ ]] && return 0 || return 1
}

main() {
  if [[ -n "$2" ]]; then
    selected_file="$2"
    [[ "$selected_file" != /* ]] && selected_file="$script_dir/$selected_file"

  elif [[ -n "$1" ]]; then
    if is_schedule_file "$1" && [[ -f "$script_dir/$1" ]]; then
      selected_file="$script_dir/$1"
    else
      select_timetable_file
    fi

  else
    select_timetable_file
  fi

  if [[ ! -f "$selected_file" ]]; then
    echo "Error: File '$selected_file' not found!"
    exit 1
  fi

  source_csv="$selected_file"
  converted_file="/tmp/converted_$(basename "$source_csv")"
  convert_encoding

  INPUT_FILE="$converted_file"
  extract_groups || { echo "No valid groups found!"; exit 1; }

  groups=$(cat .group_list)

  echo "Found groups in the file:"
  echo "$groups"

  if [[ -z "$groups" ]]; then
    echo "No groups found in the file."
    exit 1
  fi

  if [[ -n "$1" ]]; then
    if ! is_schedule_file "$1"; then
      selected_group="$1"
      if ! grep -qxF "$selected_group" <<< "$groups"; then
        echo "Error: Group '$selected_group' not found in the file!"
        exit 1
      fi
    else
      select_group
    fi
  else
    select_group
  fi

  OUTPUT_FILE="$script_dir/Google_$(basename "$selected_file")"
  echo "group: $selected_group"
  echo "Input file: $INPUT_FILE"
  echo "Output file: $OUTPUT_FILE"

  generate_output_csv
}

main "$@"
