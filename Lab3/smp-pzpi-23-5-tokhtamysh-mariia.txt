МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ

ЗВІТ
з лабораторної роботи №3
з дисципліни «Скриптові мови програмування»

Виконала                                                                 Перевірив:
ст. гр. ПЗПІ-23-5                                                        ст. викладач катедри ПІ
Тохтамиш Марія                                                           Сокорчук Ігор Петрович


Харків 2025


1 ІСТОРІЯ ЗМІН
№	   Дата	        Версія звіту	 Опис змін та виправлень
1	   29.05.2025 	0.1	           Створено розділ «Завдання», «Опис виконаної роботи» та «Висновки».


2 ЗАВДАННЯ

  Створіть простий web-застосунок на мові PHP, який реалізує базову систему магазину з функціоналом перегляду товарів та додавання їх до кошика.
Для початку створіть головну сторінку сайту у файлі index.php. Використовуйте HTML для розділення сторінки на основні частини: шапку, тіло та підвал. У шапці додайте навігаційне меню з посиланнями на основні сторінки сайту: "Головна", "Товари", "Кошик".
Створіть окрему сторінку , яка відображатиме список товарів у вигляді таблиці або списку. Кожен товар має містити назву, ціну, поле для введення кількості та кнопку "Купити". Інформацію про товари можна зберігати у вигляді масиву або у зовнішньому файлі, наприклад, data/products.php.
  На сторінці з товарами реалізуйте форму для додавання обраного товару до кошика. Форма повинна передавати дані методом POST. Після надсилання форми обов’язково перевіряйте введені дані — зокрема, кількість товару має бути додатнім числом. Обрані товари слід зберігати у сесії PHP за допомогою змінної $_SESSION.
  Створіть сторінку cart.php, яка відображатиме перелік усіх товарів, доданих до кошика, із зазначенням кількості кожного товару, його ціни та підрахунком загальної суми замовлення. Якщо кошик порожній, виведіть повідомлення із посиланням для повернення до перегляду товарів. Також реалізуйте можливість видалення окремих товарів із кошика.
  Після реалізації функціоналу запустіть локальний PHP-сервер та перевірте коректність роботи усіх сторінок у браузері.
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
  Код складається з кількох файлів, які реалізують повноцінний функціонал інтернет-магазину з кошиком та оформленням замовлення:
•	control.php - відповідає за базу даних та логіку
•	index.php - головне меню
•	product.php - перегляд та додавання товарів у кошик
•	cart.php - перегляд кошика, редагування і оформлення замовлення
•	about_us.php – загальна інформація про магазин
•	db1.db - SQLite база даних
•	styles.css, cart.css, product.css, about_us.css — стилізація
  У файлі control.php реалізовано основну логіку роботи з базою даних та кошиком для web-застосунку. Цей файл реалізує всю серверну логіку, пов’язану з товарами та кошиком: створення й підключення до бази, зчитування і оновлення даних, керування сесіями та підрахунок підсумків. У поєднанні з іншими PHP-сторінками (наприклад, products.php чи cart.php), цей код дозволяє реалізувати повноцінний інтернет-магазин на PHP без використання фреймворків.
  Функція eco_init_database() відповідає за ініціалізацію бази даних. Вона відкриває або створює файл бази даних і перевіряє, чи існує таблиця з назвою products. Якщо така таблиця відсутня, функція створює дві таблиці: перша з них — products, яка містить дані про товари, зокрема ідентифікатор (id), назву товару (name) та його ціну (price); друга — cart_items, призначена для зберігання товарів, доданих до кошика, і включає такі поля, як ідентифікатор запису (id), ідентифікатор сесії користувача (session_id), ідентифікатор товару (product_id) та кількість обраного товару (quantity). Після створення таблиць функція додає до бази кілька початкових товарів з назвами та цінами, які будуть відображатися користувачам на сторінці товарів.
Функція eco_get_database() -це допоміжна функція, яка реалізує патерн одиничного підключення (singleton). Вона гарантує, що база даних відкривається лише один раз за сесію скрипта. Якщо з'єднання ще не існує, воно створюється за допомогою eco_init_database().

62 function eco_get_database()
63{
64   static $db = null;
65   if ($db === null) {
66      $db = eco_init_database();
67   }
68   return $db;
69 }

  Функція eco_get_all_products() відповідає за отримання повного списку товарів, що зберігаються в базі даних. Вона виконує SQL-запит до таблиці products, сортує результати за алфавітом (без урахування регістру) і формує асоціативний масив, у якому ключем є id товару, а значенням — масив з детальною інформацією про кожен товар. Це дозволяє легко організовувати відображення товарів на сторінці або виконувати інші операції з ними.
  Переходячи до функції eco_get_cart_contents(), вона зосереджена на виведенні вмісту кошика для поточного користувача. Використовуючи ідентифікатор сесії (session_id), функція формує SQL-запит, який об’єднує дані з таблиці cart_items і відповідну інформацію з таблиці products. Завдяки цьому запиту можна отримати назву товару, його ціну, кількість і унікальний ідентифікатор — усе необхідне для повного відображення кошика. Повернені дані структуровані у вигляді масиву, де кожен елемент представляє окремий товар.
  Далі функція eco_add_product_to_cart($product_id, $quantity) реалізує логіку додавання товару до кошика. Спочатку вона перевіряє, чи відповідає кількість встановленим обмеженням: мінімум 1, максимум 100 одиниць. Потім здійснюється запит до бази, щоб дізнатись, чи товар уже є в кошику. Якщо товар присутній, його кількість збільшується, але не перевищує максимальне значення. Якщо ж товар відсутній, створюється новий запис у таблиці cart_items, прив’язаний до поточної сесії користувача.
  Функція eco_modify_cart_item($item_id, $quantity) логічно продовжує попередню, оскільки дає змогу змінювати кількість товару у кошику. У випадку, якщо користувач встановлює кількість меншу або рівну нулю, відповідний запис повністю видаляється з бази. Якщо ж вказано нову кількість більше нуля, то вона оновлюється за допомогою SQL-запиту UPDATE, і користувач бачить змінений результат у кошику.
  Завершує цикл обробки кошика функція eco_calculate_cart_total(), яка підраховує підсумкову вартість усіх товарів. Вона отримує список товарів у кошику, використовуючи eco_get_cart_contents(), і для кожного елемента обчислює добуток кількості на ціну. Ці значення поступово накопичуються у змінній $total, яка в результаті повертається як загальна сума замовлення. Такий підхід дозволяє швидко й точно оцінити вартість покупки перед оформленням.
На сторінці product.php реалізована важлива логіка, яка відповідає за обробку додавання товарів до кошика. Цей код працює на сервері і виконується до того, як користувачу відображається сторінка. Він реагує на надходження даних із форми, що відправляється методом POST, коли користувач вибирає товар і вказує його кількість. Використання POST-методу тут виправдане, адже саме він підходить для передачі змінних даних, які можуть впливати на стан системи, наприклад — змінювати вміст кошика. Спочатку в PHP коді перевіряється, чи надійшов запит методом POST в product.php:

5 if ($_SERVER['REQUEST_METHOD'] === 'POST') 

  Це означає, що код всередині цього блоку виконається тільки тоді, коли форма на сторінці відправлена саме методом POST (наприклад, при натисканні кнопки "Add to Cart"). Далі перевіряється, чи є в масиві $_POST потрібні параметри — ідентифікатор товару та його кількість. Ця перевірка потрібна, щоб уникнути помилок або спроб надіслати некоректні дані. Збереження типів даних у строгому вигляді шляхом приведення до цілих чисел — це ще один захід безпеки, який допомагає уникнути потенційних SQL-ін’єкцій і помилок при роботі з базою.

9 if ($quantity > 0) {
10    eco_add_product_to_cart($item_id, $quantity);  

  Якщо кількість товару вказана коректно (тобто більше нуля), виконується додавання товару до кошика. Тут відбувається звернення до функції eco_add_product_to_cart(), яка реалізує саму логіку додавання або оновлення кількості товару у базі даних.

68  <?php foreach ($items as $item): ?>
69   <div class="product-card">
70    <form method="post" action="product.php" class="product-form">
71       <input type="hidden" name="item_id" value="<?php echo $item['id']; ?>" />
72      <div class="product-card__header">
73        <div class="product-card__name"><?php echo htmlspecialchars($item['name']); ?></div>
74        <div class="product-card__price"><?php echo number_format($item['price'], 2); ?> UAH</div>
75      </div>
76      <div class="product-card__input-row">
77        <div class="product-card__input-group">
78          <label for="quantity_<?php echo $item['id']; ?>" class="product-card__label">Quantity:</label>
79          <input type="number" id="quantity_<?php echo $item['id']; ?>" name="quantity" value="1" min="1" max="99" class="product-card__input" />
80        </div>
81        <div class="product-card__submit">
82          <button type="submit" class="product-card__button">Add to Cart</button>
83        </div>
84      </div>
85    </form>
86  </div>
87  <?php endforeach; ?>

  Цей фрагмент коду відповідає за відображення окремої картки товару на сторінці (рядки 68–87), а також за форму, через яку користувач може додати цей товар до кошика. Усередині кожної картки (початок у рядку 69) знаходиться HTML-форма (рядок 70) з методом POST і атрибутом action="product.php". Це означає: коли користувач натисне кнопку Add to Cart (рядок 82), браузер відправить дані форми на цю ж сторінку (product.php) саме методом POST. Далі йде блок з назвою товару та його ціною (рядки 72–74). Назва виводиться через htmlspecialchars() (рядок 73), що забезпечує захист від XSS-атак. Ціна відображається у форматі з двома знаками після коми (рядок 74). Нижче розташований блок для введення кількості товару (рядки 76–79). Це поле типу number (рядок 79), де встановлено мінімальне значення 1 і максимальне 99, щоб обмежити користувача від введення невалідної кількості. І нарешті, кнопка (рядок 82) надсилає форму. При натисканні передаються два параметри: item_id і quantity. Таким чином, кожен товар на сторінці має свою окрему форму. Коли користувач обирає кількість і натискає кнопку, ці дані надсилаються на сервер, де відбувається обробка додавання товару у кошик.
  Сторінка basket.php відповідає за відображення кошика користувача у веб-додатку магазину "Весна". Ця сторінка виконує кілька важливих завдань:
•	Дозволяє додавати товари до кошика.
•	Дає можливість видаляти товари з кошика.
•	Дозволяє оформити замовлення (checkout).
•	Відображає вміст кошика, загальну суму і відповідні дії.

5 if (isset($_POST['action'])) {
6        if ($_POST['action'] === 'remove' && isset($_POST['item_id'])) {
7            $cartItemId = (int)$_POST['item_id'];
8            eco_modify_cart_item($cartItemId, 0);
9        } elseif ($_POST['action'] === 'checkout') {
10            $database = eco_get_database();
11            $currentSessionId = session_id();
12            $deleteStmt = $database->prepare('DELETE FROM cart_items WHERE session_id = :session_id');
13            $deleteStmt->bindValue(':session_id', $currentSessionId, SQLITE3_TEXT);
14           $deleteStmt->execute();
15
16            $_SESSION['checkout_success'] = true;
17
18            header('Location: ' . $_SERVER['PHP_SELF']);
19            exit();
20        }
21    }

  Цей фрагмент коду (рядки 5–21) обробляє дії користувача, пов’язані з кошиком на сторінці basket.php. Йдеться про два основні сценарії: видалення товару з кошика та оформлення замовлення (checkout). Усе починається з перевірки (рядок 5), чи надійшов POST-запит з полем action. Якщо так — далі аналізується, яку саме дію виконав користувач.
  Якщо користувач натиснув кнопку Видалити товар з кошика, спрацьовує блок коду в рядках 6–8. Система перевіряє, чи значення action дорівнює 'remove', і чи передано параметр item_id. У такому разі значення item_id перетворюється на ціле число (рядок 7) і передається у функцію eco_modify_cart_item() (рядок 8), яка встановлює кількість товару на 0, тобто фактично видаляє його з кошика.
  Якщо ж користувач натиснув кнопку Оформити замовлення, активується блок коду в рядках 9–20. Створюється з’єднання з базою даних через функцію eco_get_database() (рядок 10), далі отримується поточна сесія користувача (session_id() — рядок 11), і формується SQL-запит на видалення всіх товарів з кошика поточної сесії (рядки 12–14).
  Після успішного виконання запиту:
•	Установлюється сесійна змінна $_SESSION['checkout_success'] = true (рядок 16), яка згодом використовується для відображення повідомлення "Дякуємо за покупку!".
•	Відбувається перенаправлення користувача на цю ж сторінку basket.php (рядки 18–19), щоб уникнути повторного надсилання форми після оновлення сторінки.

23 if (isset($_POST['item_id'], $_POST['quantity'])) {
24        $item_id = (int)$_POST['item_id'];
25        $quantity = (int)$_POST['quantity'];
26        if ($item_id > 0 && $quantity > 0) {
27           eco_add_product_to_cart($item_id, $quantity);
28
29        }
30    }

  Цей фрагмент коду відповідає за обробку форми додавання товару до кошика на сторінці, наприклад, product.php. Усе починається з перевірки в рядку 23 — if (isset($_POST['item_id'], $_POST['quantity'])). Вона перевіряє, чи були надіслані обидва обов’язкові параметри через метод POST: item_id (ідентифікатор товару) та quantity (кількість, яку хоче додати користувач).
  У рядках 24–25 значення обох параметрів приводяться до цілих чисел за допомогою (int), щоб гарантувати коректність і захист від потенційних зловживань. Далі, у рядку 26, виконується додаткова перевірка: чи обидва числа більші за 0. Це логічна умова, яка не дозволяє додати до кошика товар із невалідними параметрами. Якщо все гаразд — у рядку 27 викликається функція eco_add_product_to_cart($item_id, $quantity), яка фактично додає вказаний товар до кошика в кількості, заданій користувачем. Ця дія прив'язана до поточної сесії користувача.


4 ВИСНОВКИ

	Під час виконання лабораторної роботи я навчилась реалізовувати базовий веб-застосунок інтернет-магазину на PHP без використання фреймворків. Створила головну сторінку з навігаційним меню для переходу між сторінками магазину. Розробила сторінку товарів, на якій відображається список продуктів з назвою, ціною, полем для вибору кількості та кнопкою додавання у кошик. Забезпечила передачу даних форми методом POST з перевіркою коректності введених даних, зокрема, що кількість товару більша за нуль. Використала сесію PHP для зберігання даних кошика користувача. Створила сторінку кошика, де відображаються додані товари, їх кількість, ціна і підсумкова сума замовлення. Реалізувала можливість видалення товарів із кошика. Провела тестування локально через PHP-сервер і підтвердила коректну роботу всього функціоналу.
 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: 
https://www.youtube.com/watch?v=uiPnQCb_nnc

00:00 – Вступ: представлення та мета лабораторної роботи
00:15 – Демонстрація: головна сторінки сайту (Home)
00:29 – Демонстрація: перехід до сторінки продуктів
01:17 – Демонстрація: перегляд кошика
02:06 – Демонстрація: сторінка "About Us"
02:30 – Розбір products.php
04:47 – Розбір cart.php
07:56 – Розбір control.php: 


