МІНІСТЕРСТВО ОСВІТИ I НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ

ЗВІТ
з лабораторної роботи №2
з дисципліни «Скриптові мови програмування»

Виконала                                                                 Перевірив:
ст. гр. ПЗПІ-23-5                                                        ст. викладач катедри ПІ
Тохтамиш Марія                                                           Сокорчук Ігор Петрович


Харків 2025


1 ІСТОРІЯ ЗМІН
№	   Дата	        Версія звіту	 Опис змін та виправлень
1	   28.05.2025 	0.1	           Створено розділ «Завдання», «Опис виконаної роботи» та «Висновки».


2 ЗАВДАННЯ

	Потрібно створити консольний застосунок «Продовольчий магазин "Весна"».
Ім'я скрипта: ~/імʼя_облікового_запису-task3.php
Наприклад: ~/pzpi-27-15-shukhevych-roman-task3.php
Програма після запуску повинна вивести на термінал перелік можливих дій:

################################
# ПРОДОВОЛЬЧИЙ МАГАЗИН "ВЕСНА" #
################################
1 Вибрати товари
2 Отримати підсумковий рахунок
3 Налаштувати свій профіль
0 Вийти з програми
Введіть команду: _
Далі програма очікує введення значення з клавіатури. Якщо користувач вводить число, якого немає в списку можливих команд, необхідно вивести повідомлення про помилку і запропонувати користувачу ввести інше число:
Введіть команду: 4
ПОМИЛКА! Введіть правильну команду
1 Вибрати товари
2 Отримати підсумковий рахунок
3 Налаштувати свій профіль
0 Вийти з програми
Введіть команду: _
Щоб розпочати купувати товари, необхідно ввести число «1», після чого користувач повинен потрапити в режим закупівлі товарів.
На екрані має з’явитися перелік продуктів, де кожен рядок складається з номера, назви товару і його вартості, наприклад:

Введіть команду: 1
№  НАЗВА                 ЦІНА
1  Молоко пастеризоване  12
2  Хліб чорний           9
3  Сир білий             21
4  Сметана 20%           25
5  Кефір 1%              19
6  Вода газована         18
7  Печиво "Весна"        14
   -----------
0  ПОВЕРНУТИСЯ
Виберіть товар: _
Щоб купити товар, необхідно ввести його номер.
Після успішної перевірки на існування номера товару в списку, програма має попросити ввести кількість товару:

Виберіть товар: 2
Вибрано: Хліб чорний
Введіть кількість, штук: 1
У КОШИКУ:
НАЗВА        КІЛЬКІСТЬ
Хліб чорний  1
Якщо номер товару і його кількість (менше 100 шт.) були вказані коректно, то товар додається в кошик.
Якщо вказано кількість «0», то товар видаляється з кошика:

Виберіть товар: 2
Вибрано: Хліб чорний
Введіть кількість, штук: 0
ВИДАЛЯЮ З КОШИКА
КОШИК ПОРОЖНІЙ
Далі знову відображається перелік товарів і пропонується купити наступний товар.
Якщо номер товару вказано неправильно, виводиться сповіщення про помилку, нову виводиться перелік товарів:

№  НАЗВА                 ЦІНА
1  Молоко пастеризоване  12
2  Хліб чорний           9
3  Сир білий             21
4  Сметана 20%           25
5  Кефір 1%              19
6  Вода газована         18
7  Печиво "Весна"        14
   -----------
0  ПОВЕРНУТИСЯ
Виберіть товар: 8
ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ
Щоб завершити купувати товари і перейти до попереднього меню, необхідно ввести з клавіатури цифру «0».
Щоб отримати підсумковий рахунок, потрібно ввести число «2».
Рахунок має містити таку інформацію: №, назва, ціна товару, кількість товару, вартість товару. 
У кінці чека має бути: РАЗОМ ДО CПЛАТИ: сума_за_всі_товари
Наприклад:
Введіть команду: 2
№  НАЗВА                 ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ
1  Печиво "Весна"        14    1          14
2  Молоко пастеризоване  12    2          24
3  Сметана 20%           25    1          25
4  Хліб чорний           9     1          9
РАЗОМ ДО CПЛАТИ: 72
Щоб встановити свій профіль потрібно, ввести число «3», після чого програма попросить ввести ваше ім'я та ваш вік:
 
Ваше імʼя: _
Ваш вік: _
Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
Користувач не може бути молодшим 7-ми або старшим 150-ти років
Щоб завершити роботу та вийти з програми, потрібно ввести число «0».
У програмі потрібно перевіряти інформацію, яку вводить користувач, а саме:
•	обраний пункт меню існує;
•	обраний товар існує;
•	введена кількість товару більша нуля;
•	імʼя користувача містить хча б одну літеру;
•	вік користувача становить від 7-ми до 150-ти років.

 
3 ОПИС ВИКОНАНОЇ РОБОТИ

  Клас Restrictions у цьому проєкті виконує роль централізованого сховища констант, які задають основні обмеження для роботи всієї програми. Зокрема, він містить мінімальний і максимальний допустимий вік користувача, щоб перевірити, чи підходить введене значення під вікові обмеження. Також тут визначено мінімальну і максимальну кількість товару, яку можна додати до кошика, що дозволяє запобігти помилкам і некоректному використанню кошика.
  Клас Product описує товар, який може бути доступний у магазині. Він містить два приватних властивості: назву товару ($title) та його ціну ($cost). Дані встановлюються через конструктор і доступні лише для читання через методи getTitle() та getCost(), що гарантує незмінність інформації про товар.
  Клас Cart відповідає за зберігання товарів, які користувач додав до свого кошика. Він має приватне поле $items, яке є масивом: ключами є ідентифікатори товарів (productId), а значеннями — кількість відповідного товару. Метод addProduct додає товар до кошика або змінює його кількість. Він приймає два аргументи: ідентифікатор товару ($productId) і кількість товару, яку треба додати ($quantity)

40 public function addProduct(int $productId, int $quantity): void
41  {
42      if ($quantity <= 0) {
43          unset($this->items[$productId]);
44          echo "Товар видалено з кошика.\n";
45      } else {
46          $currentQuantity = $this->items[$productId] ?? 0;
47          $newQuantity = $currentQuantity + $quantity;
 48
49          if ($newQuantity > Restrictions::MAX_QUANTITY) {
50              echo "ПОМИЛКА! Загальна кількість не може перевищувати " . Restrictions::MAX_QUANTITY . ".\n";
 51           } else {
52              $this->items[$productId] = $newQuantity;
53          }
54      }

  Клас UserProfile представляє профіль користувача, який зберігає його ім’я та вік. Обидва поля — ім’я та вік — можуть бути або значенням, або null, якщо їх ще не встановлено. Метод setName перевіряє, чи ім’я відповідає певному шаблону: воно має містити лише українські або латинські літери, апострофи, дефіси та пробіли, і обов’язково включати принаймні одну літеру. Якщо умови дотримано, ім’я зберігається у властивість класу, і метод повертає true; інакше — повертає false. Метод setAge приймає вік користувача і перевіряє, чи він знаходиться в межах, визначених у класі Restrictions, тобто від 7 до 150 років. Якщо вік коректний, він зберігається у відповідну властивість, і метод повертає true, у протилежному випадку — false. Також у класі є методи getName і getAge, які повертають збережене ім’я та вік, або null, якщо ці значення ще не були встановлені.
Клас Store відповідає за логіку роботи програми "Продовольчий магазин 'Весна'" в консольному інтерфейсі. Він об’єднує інші частини системи — товари, кошик і профіль користувача — та реалізує взаємодію з користувачем через текстове меню. У класі є масив товарів, об'єкти Cart і UserProfile, а також шлях до файлу з продуктами (product.json). У конструкторі класу відбувається ініціалізація кошика, профілю та завантаження списку товарів із файлу.

115 public function __construct()
116 {
117     $this->cart = new Cart();
118    $this->userProfile = new UserProfile();
119
120     $this->productFile = __DIR__ . DIRECTORY_SEPARATOR . 'product.json';
121     $this->loadProductsFromFile();
122
123  }

  Mетод __construct() - Це конструктор класу. Створює об’єкти кошика (Cart) і профілю користувача (UserProfile), задає шлях до файлу з товарами та викликає метод для їх завантаження.
  Метод loadProductsFromFile() зчитує вміст файлу product.json, перевіряє його існування і коректність JSON-формату, та перетворює кожен запис у новий об'єкт Product, додаючи його до масиву $products.

126 private function loadProductsFromFile(): void
127 {
128     $jsonFile = __DIR__ . DIRECTORY_SEPARATOR . 'product.json';
129
130      if (!file_exists($jsonFile)) {
131            die("Помилка: Файл продуктів {$jsonFile} не знайдено\n");
132      }
133
134        $jsonData = file_get_contents($jsonFile);
135        $productArray = json_decode($jsonData, true);
136
137        if (json_last_error() !== JSON_ERROR_NONE) {
138           die("Помилка при розборі JSON: " . json_last_error_msg() . "\n");
139        }
140
141        foreach ($productArray as $id => $data) {
142            if (isset($data['name'], $data['price'])) {
143                $this->products[(int)$id] = new Product($data['name'], (float)$data['price']);
144            }
145        }
146    }

  Метод run() є головний циклом роботи програми. Виводить меню, зчитує введення користувача та виконує відповідні дії: вибір товарів, вивід чеку, налаштування профілю або завершення програми.
  Метод getLongestTitleLength() використовується для визначення максимальної довжини назви товару з-поміж усіх наданих об'єктів класу Product. Його основна мета — забезпечити правильне вирівнювання таблиць або списків під час виведення інформації, особливо у фінальному рахунку. Оскільки назви товарів можуть містити юнікод, метод використовує регулярний вираз з флагами /./us у функції preg_match_all(). Це дозволяє правильно обробити багатобайтові символи, кожен з яких враховується як один символ, навіть якщо займає кілька байтів. У циклі кожна назва перевіряється на довжину, і якщо вона перевищує поточне максимальне значення, воно оновлюється. Результат — найбільша кількість символів серед усіх назв — повертається як ціле число.

189 private function getLongestTitleLength(array $products): int
190   {
191       $max = 0;
192      foreach ($products as $product) {
193          preg_match_all('/./us', $product->getTitle(), $chars);
194          $length = count($chars[0]);
195          if ($length > $max) {
196              $max = $length;
197          }
198      }
199      return $max;
200  }

  Метод handleProductSelection() відповідає за обробку вибору товару користувачем. Після того, як користувач обрав номер товару, метод виводить його назву і пропонує ввести кількість. Введення зчитується за допомогою fgets(STDIN), після чого очищається від зайвих символів і перетворюється в ціле число. Потім викликається метод кошика addProduct(), який додає обраний товар із заданою кількістю. Після цього метод одразу виводить оновлений вміст кошика, щоб користувач бачив, що саме вже було додано.
  Метод printCartContents() друкує список товарів, які знаходяться у кошику. Він використовує той самий принцип вирівнювання, що й список товарів: обчислює кількість символів у назві за допомогою preg_match_all('/./us', ...), обраховує необхідний відступ, і виводить кожен елемент у вигляді рядка, де назва і кількість чітко розділені. Метод selectProducts() Керує процесом вибору товарів. Виводить список, зчитує введення користувача, перевіряє його та викликає обробник вибору, якщо введене коректно.
  Метод displayFinalBill() формує фінальний чек на основі вмісту кошика. Він динамічно визначає ширину кожного стовпця: назви, ціни, кількості, вартості, щоб таблиця виглядала рівномірно, навіть якщо ці значення мають різну довжину. Вивід формується через цикл, у якому для кожного товару обчислюється підсумкова вартість, що дорівнює ціні, помноженій на кількість. Також підсумовується загальна сума до сплати. Усі числові значення, як і назви, форматуються з використанням обчислених відступів для створення охайної таблиці.
  Метод configureUserProfile() запитує імʼя та вік користувача. Для імені виконується валідація за допомогою методу setName(), який перевіряє, чи введено хоча б одну літеру. Якщо ім’я не проходить перевірку, виводиться повідомлення про помилку, і процес повторюється. Далі зчитується вік. Спочатку перевіряється, чи це числове значення (is_numeric()), після чого — чи входить вік у допустимі межі, які визначаються константами Restrictions::MIN_AGE та Restrictions::MAX_AGE. Успішно введені значення зберігаються у профіль користувача, а процес завершується.

 
4 ВИСНОВКИ

	Під час виконання цієї лабораторної роботи я навчилася створювати консольний застосунок на PHP із повноцінною взаємодією з користувачем через текстове меню. Я реалізувала обробку введення користувача, перевірку правильності введених даних, логіку переходів між пунктами меню, а також сформувала функціонал вибору товарів, підрахунку вартості й налаштування профілю. Окрім цього, я навчилася зчитувати дані з JSON-файлів. Завдяки цій роботі я закріпила навички роботи з масивами, умовними конструкціями, циклами, функціями та файлами в PHP.

 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=Ip-XTLpcDOE

Хронологічний опис відеозапису:
0:00 – Вступ
0:17 – Клас Restrictions
0:36 – Клас Product
0:51 –  Клас Cart
1:25 – Клас UserProfile
2:01 – Клас Store
2:54 - Методи класу Store
7:30 – Демонстрація: Запуск програми
7:49 – Демонстрація: Вибір товару 
9:01 – Демонстрація: Підсумковий рахунок
9:16 – Демонстрація: Введення імені та віку
